/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.dbservice.api;

import java.math.BigDecimal;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import com.example.dbservice.dto.TransactionDTO;
import com.example.dbservice.dto.TransactionPage;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-27T23:35:56.204603+02:00[Europe/Oslo]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "transactions", description = "the transactions API")
public interface TransactionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /transactions : Create a new transaction
     *
     * @param transactionDTO  (required)
     * @return Transaction created successfully (status code 201)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createTransaction",
        summary = "Create a new transaction",
        responses = {
            @ApiResponse(responseCode = "201", description = "Transaction created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TransactionDTO> createTransaction(
        @Parameter(name = "TransactionDTO", description = "", required = true) @Valid @RequestBody TransactionDTO transactionDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 0.8008281904610115, \"id\" : \"id\", \"status\" : 6.027456183070403 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transactions/statuses/{status} : Get transactions by status
     *
     * @param status Status code to filter transactions (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param xRequestID  (optional)
     * @return Transactions retrieved successfully (status code 200)
     *         or No transactions found for the given status (status code 404)
     */
    @Operation(
        operationId = "getTransactionsByStatus",
        summary = "Get transactions by status",
        responses = {
            @ApiResponse(responseCode = "200", description = "Transactions retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionPage.class))
            }),
            @ApiResponse(responseCode = "404", description = "No transactions found for the given status")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions/statuses/{status}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TransactionPage> getTransactionsByStatus(
        @Parameter(name = "status", description = "Status code to filter transactions", required = true, in = ParameterIn.PATH) @PathVariable("status") BigDecimal status,
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") Integer limit,
        @Parameter(name = "X-Request-ID", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-ID", required = false) @Nullable String xRequestID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 100, \"offset\" : 0, \"limit\" : 10, \"count\" : 10, \"items\" : [ { \"amount\" : 0.8008281904610115, \"id\" : \"id\", \"status\" : 6.027456183070403 }, { \"amount\" : 0.8008281904610115, \"id\" : \"id\", \"status\" : 6.027456183070403 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
